package com.artemis.codes.Especiales;

public class CodesEspeciales {

    public static String javafastreader = "// FastReader (Lectura rapida con tokenizer)\n"
            + "import java.io.BufferedReader;\n"
            + "import java.io.IOException;\n"
            + "import java.io.InputStreamReader;\n"
            + "import java.util.StringTokenizer;\n"
            + "\n"
            + "public class Main {\n"
            + "\n"
            + "    static class FastReader {\n"
            + "\n"
            + "        BufferedReader br;\n"
            + "        StringTokenizer st;\n"
            + "\n"
            + "        public FastReader() {\n"
            + "            br = new BufferedReader(new InputStreamReader(System.in));\n"
            + "        }\n"
            + "\n"
            + "        String next() {\n"
            + "            while (st == null || !st.hasMoreElements()) {\n"
            + "                try {\n"
            + "                    st = new StringTokenizer(br.readLine());\n"
            + "                } catch (IOException e) {\n"
            + "                    e.printStackTrace();\n"
            + "                }\n"
            + "            }\n"
            + "            return st.nextToken();\n"
            + "        }\n"
            + "\n"
            + "        int nextInt() {\n"
            + "            return Integer.parseInt(next());\n"
            + "        }\n"
            + "\n"
            + "        long nextLong() {\n"
            + "            return Long.parseLong(next());\n"
            + "        }\n"
            + "\n"
            + "        double nextDouble() {\n"
            + "            return Double.parseDouble(next());\n"
            + "        }\n"
            + "\n"
            + "        String nextLine() {\n"
            + "            String str = \"\";\n"
            + "            try {\n"
            + "                str = br.readLine();\n"
            + "            } catch (IOException e) {\n"
            + "                e.printStackTrace();\n"
            + "            }\n"
            + "            return str;\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    public static void main(String[] args) {\n"
            + "        FastReader s = new FastReader();\n"
            + "        int n = s.nextInt();\n"
            + "        int k = s.nextInt();\n"
            + "        int count = 0;\n"
            + "        while (n-- > 0) {\n"
            + "            int x = s.nextInt();\n"
            + "            if (x % k == 0) {\n"
            + "                count++;\n"
            + "            }\n"
            + "        }\n"
            + "        System.out.println(count);\n"
            + "    }\n"
            + "}";
    public static String javaultrareader = "// UltraReader (Lectura ultra rapida usando streams y buffers)\n"
            + "\n"
            + "import java.io.DataInputStream;\n"
            + "import java.io.FileInputStream;\n"
            + "import java.io.IOException;\n"
            + "\n"
            + "public class Main {\n"
            + "\n"
            + "    static class UltraReader {\n"
            + "\n"
            + "        final private int BUFFER_SIZE = 1 << 16;\n"
            + "        private DataInputStream din;\n"
            + "        private byte[] buffer;\n"
            + "        private int bufferPointer, bytesRead;\n"
            + "\n"
            + "        public UltraReader() {\n"
            + "            din = new DataInputStream(System.in);\n"
            + "            buffer = new byte[BUFFER_SIZE];\n"
            + "            bufferPointer = bytesRead = 0;\n"
            + "        }\n"
            + "\n"
            + "        public UltraReader(String file_name) throws IOException {\n"
            + "            din = new DataInputStream(new FileInputStream(file_name));\n"
            + "            buffer = new byte[BUFFER_SIZE];\n"
            + "            bufferPointer = bytesRead = 0;\n"
            + "        }\n"
            + "\n"
            + "        public String readLine() throws IOException {\n"
            + "            byte[] buf = new byte[64]; // line length \n"
            + "            int cnt = 0, c;\n"
            + "            while ((c = read()) != -1) {\n"
            + "                if (c == '\\n') {\n"
            + "                    break;\n"
            + "                }\n"
            + "                buf[cnt++] = (byte) c;\n"
            + "            }\n"
            + "            return new String(buf, 0, cnt);\n"
            + "        }\n"
            + "\n"
            + "        public int nextInt() throws IOException {\n"
            + "            int ret = 0;\n"
            + "            byte c = read();\n"
            + "            while (c <= ' ') {\n"
            + "                c = read();\n"
            + "            }\n"
            + "            boolean neg = (c == '-');\n"
            + "            if (neg) {\n"
            + "                c = read();\n"
            + "            }\n"
            + "            do {\n"
            + "                ret = ret * 10 + c - '0';\n"
            + "            } while ((c = read()) >= '0' && c <= '9');\n"
            + "\n"
            + "            if (neg) {\n"
            + "                return -ret;\n"
            + "            }\n"
            + "            return ret;\n"
            + "        }\n"
            + "\n"
            + "        public long nextLong() throws IOException {\n"
            + "            long ret = 0;\n"
            + "            byte c = read();\n"
            + "            while (c <= ' ') {\n"
            + "                c = read();\n"
            + "            }\n"
            + "            boolean neg = (c == '-');\n"
            + "            if (neg) {\n"
            + "                c = read();\n"
            + "            }\n"
            + "            do {\n"
            + "                ret = ret * 10 + c - '0';\n"
            + "            } while ((c = read()) >= '0' && c <= '9');\n"
            + "            if (neg) {\n"
            + "                return -ret;\n"
            + "            }\n"
            + "            return ret;\n"
            + "        }\n"
            + "\n"
            + "        public double nextDouble() throws IOException {\n"
            + "            double ret = 0, div = 1;\n"
            + "            byte c = read();\n"
            + "            while (c <= ' ') {\n"
            + "                c = read();\n"
            + "            }\n"
            + "            boolean neg = (c == '-');\n"
            + "            if (neg) {\n"
            + "                c = read();\n"
            + "            }\n"
            + "\n"
            + "            do {\n"
            + "                ret = ret * 10 + c - '0';\n"
            + "            } while ((c = read()) >= '0' && c <= '9');\n"
            + "\n"
            + "            if (c == '.') {\n"
            + "                while ((c = read()) >= '0' && c <= '9') {\n"
            + "                    ret += (c - '0') / (div *= 10);\n"
            + "                }\n"
            + "            }\n"
            + "\n"
            + "            if (neg) {\n"
            + "                return -ret;\n"
            + "            }\n"
            + "            return ret;\n"
            + "        }\n"
            + "\n"
            + "        private void fillBuffer() throws IOException {\n"
            + "            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n"
            + "            if (bytesRead == -1) {\n"
            + "                buffer[0] = -1;\n"
            + "            }\n"
            + "        }\n"
            + "\n"
            + "        private byte read() throws IOException {\n"
            + "            if (bufferPointer == bytesRead) {\n"
            + "                fillBuffer();\n"
            + "            }\n"
            + "            return buffer[bufferPointer++];\n"
            + "        }\n"
            + "\n"
            + "        public void close() throws IOException {\n"
            + "            if (din == null) {\n"
            + "                return;\n"
            + "            }\n"
            + "            din.close();\n"
            + "        }\n"
            + "    }\n"
            + "\n"
            + "    public static void main(String[] args) throws IOException {\n"
            + "        UltraReader s = new UltraReader();\n"
            + "        int n = s.nextInt();\n"
            + "        int k = s.nextInt();\n"
            + "        int count = 0;\n"
            + "        while (n-- > 0) {\n"
            + "            int x = s.nextInt();\n"
            + "            if (x % k == 0) {\n"
            + "                count++;\n"
            + "            }\n"
            + "        }\n"
            + "        System.out.println(count);\n"
            + "    }\n"
            + "}";
    public static String cppcinoptimizado = "#include <bits/stdc++.h> \n"
            + "using namespace std; \n"
            + "  \n"
            + "int main() \n"
            + "{ \n"
            + "    // Se agregan las dos lineas de abajo permitiendo que CIN tenga la\n"
            + "    //velocidad de SCANF\n"
            + "    ios_base::sync_with_stdio(false); \n"
            + "    cin.tie(NULL);     \n"
            + "    int n, k, t; \n"
            + "    int cnt = 0; \n"
            + "    cin >> n >> k; \n"
            + "    for (int i=0; i<n; i++) \n"
            + "    { \n"
            + "        cin >> t; \n"
            + "        if (t % k == 0) \n"
            + "            cnt++; \n"
            + "    } \n"
            + "    cout << cnt << \"\\n\"; \n"
            + "    return 0; \n"
            + "} ";
    public static String cppfastscan = "//Lectura rapida de numeros enteros (Solo valido para int)\n"
            + "#include <bits/stdc++.h> \n"
            + "using namespace std;\n"
            + "\n"
            + "void fastscan(int &number) {\n"
            + "    //Variable para indicar el signo del número\n"
            + "    bool negative = false;\n"
            + "    register int c;\n"
            + "    number = 0;\n"
            + "    // Extraer el caracter actual de buffer\n"
            + "    c = getchar();\n"
            + "    if (c == '-') {\n"
            + "        // El numero es negativo\n"
            + "        negative = true;\n"
            + "        //Extraer el siguiente caracter del buffer\n"
            + "        c = getchar();\n"
            + "    }\n"
            + "    //se sigue extrayendo caracteres si son enteros\n"
            + "    // es decir su valor de ASCII esta entre '0'(48) y '9' (57)  \n"
            + "    for (; (c > 47 && c < 58); c = getchar())\n"
            + "        number = number * 10 + c - 48;\n"
            + "    //si la entrada escaneada tiene signo negativo\n"
            + "    //se niega el valor del numero \n"
            + "    if (negative)\n"
            + "        number *= -1;\n"
            + "}\n"
            + "\n"
            + "int main() {\n"
            + "    int number;\n"
            + "    fastscan(number);\n"
            + "    cout << number << \"\\n\";\n"
            + "    return 0;\n"
            + "} ";
    public static String pyfastinout = "# Se importa los modulos de lectura y escritura estandar \n"
            + "from sys import stdin\n"
            + "from sys import stdout\n"
            + "# Entrada de toda la linea\n"
            + "n = stdin.readline() \n"
            + "# Llenando una lista por medio de entrada de toda la linea\n"
            + "arr = [int(x) for x in stdin.readline().split()] \n"
            + "#Inicializamos variable\n"
            + "summation = 0\n"
            + "# Calcular sum\n"
            + "for x in arr: \n"
            + "    summation += x \n"
            + "# imprimir respuesta a través de write, \n"
            + "# el método write escribe solo strings\n"
            + "# por lo que necesitamos convertir cualquier \n"
            + "# dato en string para usarlo\n"
            + "stdout.write(str(summation)) ";
    public static String pynummismalinea = "#Lectura de multiples numeros que estan en una misma linea\n"
            + "import sys \n"
            + "def get_ints(): return map(int, sys.stdin.readline().strip().split()) \n"
            + "a,b,c,d = get_ints() ";
}
